generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // Administrador do sistema
  OWNER // Responsável pela conta da empresa contratante
  MANAGER // Gerente ou supervisor
  EMPLOYEE // Colaborador padrão
}

model User {
  id           String   @id @unique @default(uuid())
  email        String   @unique
  name         String
  password     String
  role         Role     @default(EMPLOYEE)
  isActive     Boolean  @default(true)
  profileImage String? // Base64 da imagem de perfil
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?

  workSchedule   WorkSchedule? @relation(fields: [workScheduleId], references: [id])
  workScheduleId String?

  sessions    Session[]
  timeRecords TimeRecord[]
  requests    Request[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  token     String?  @unique
  expiredAt DateTime
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("sessions")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  departments   Department[]
  locations     Location[]
  holidays      Holiday[]
  workSchedules WorkSchedule[]
  timeRecords   TimeRecord[]
  requests      Request[]

  @@map("companies")
}

model Location {
  id          String   @id @default(uuid())
  description String // Ex: "Matriz", "Filial SP", "Obra Zona Sul"
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String
  timeRecords TimeRecord[]

  @@map("locations")
}

model Department {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  @@map("departments")
}

model WorkSchedule {
  id   String @id @default(uuid())
  name String

  days WorkScheduleDay[] // Dias da semana com horários definidos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String
  timeRecords TimeRecord[]

  @@map("work_schedules")
}

enum BreakType {
  NONE
  FIXED
  FLEXIBLE
}

model WorkScheduleDay {
  id               String    @id @default(uuid())
  weekday          Weekday
  startTime        String // "08:00"
  endTime          String // "18:00"
  totalWorkMinutes Int // minutos => 510
  breakType        BreakType @default(NONE)
  breakStartWindow String? // "12:00"
  breakEndWindow   String? // "13:30"
  breakDuration    Int? // minutos => 90

  workSchedule   WorkSchedule @relation(fields: [workScheduleId], references: [id])
  workScheduleId String

  @@map("work_schedule_days")
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model CalendarDay {
  id        String   @id @default(uuid())
  date      DateTime @unique
  weekday   Weekday
  createdAt DateTime @default(now())

  @@map("calendar_days")
}

enum HolidayScope {
  NATIONAL
  STATE
  CITY
  COMPANY
}

model Holiday {
  id          String       @id @default(uuid())
  date        DateTime
  name        String // Ex: "Natal", "Independência"
  scope       HolidayScope
  state       String? // Ex: "SP"
  city        String? // Ex: "São Paulo"
  isRecurring Boolean      @default(false) // Se repete todo ano (ex: 25/12)
  createdAt   DateTime     @default(now())

  companyId String? // Se scope = COMPANY
  company   Company? @relation(fields: [companyId], references: [id])

  @@map("holidays")
}

enum TimeRecordType {
  ENTRY // Entrada no trabalho
  EXIT // Saída do trabalho
  BREAK_START // Início do intervalo
  BREAK_END // Fim do intervalo
}

model TimeRecord {
  id        String         @id @default(uuid())
  type      TimeRecordType
  photoUrl  String? // URL da foto ou base64
  latitude  Float?
  longitude Float?
  createdAt DateTime       @default(now())

  user           User          @relation(fields: [userId], references: [id])
  userId         String
  location       Location?     @relation(fields: [locationId], references: [id])
  locationId     String?
  workSchedule   WorkSchedule? @relation(fields: [workScheduleId], references: [id])
  workScheduleId String?
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String
  request        Request[]

  @@map("time_records")
}

enum RequestType {
  TIME_ADJUSTMENT
  ABSENCE
}

enum AbsenceKind {
  ADJUSTMENT // "ajuste" 
  VACATION // "ferias"
  HEALTH // "saude"
  OTHER // "outro"
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Request {
  id         String        @id @default(uuid())
  type       RequestType
  status     RequestStatus @default(PENDING)
  reason     String
  response   String?
  createdAt  DateTime      @default(now())
  reviewedAt DateTime?

  // Para TIME_ADJUSTMENT
  adjustmentDate DateTime?
  adjustedTimes  AdjustedTime[]

  // Para ABSENCE
  absenceStart DateTime?
  absenceEnd   DateTime?
  absenceKind  AbsenceKind?

  // Comprovante em base64 (opcional)
  attachmentBase64 String? // Arquivo em base64 como atestado, declaração, etc.

  user         User        @relation(fields: [userId], references: [id])
  userId       String
  company      Company     @relation(fields: [companyId], references: [id])
  companyId    String
  timeRecord   TimeRecord? @relation(fields: [timeRecordId], references: [id])
  timeRecordId String?

  @@map("requests")
}

model AdjustedTime {
  id   String         @id @default(uuid())
  time String
  type TimeRecordType

  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String

  @@map("adjusted_times")
}
